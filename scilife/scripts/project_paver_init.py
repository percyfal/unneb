#!/usr/bin/env python
"""
    project_paver_init.py
    ~~~~~~~~~~~~~~~~

    Setup pavement configuration file for a project for use with 
    paver (http://paver.github.com/paver/).

"""

import sys
import os
import time
from os import path
from termcolor import colored, cprint
from mako.template import Template

TERM_ENCODING = getattr(sys.stdin, 'encoding', None)

PROMPT_PREFIX = '> '

PAVEMENT_FILE = Template('''\
"""
${project} pavement file

Created by project_paver_init.py on ${now}.
"""
# This is a pavement configuration file generated by project_paver_init.py.
# Some configurations have been commented out, but are included to show
# additional configurations and imports
import os
import itertools
import sys
import glob
import re

from mako.template import Template
from mako.lookup import TemplateLookup

from paver.easy import *
import paver.doctools

from ngs.templates import TEMPLATE_DIR as NGS_TEMPLATE_DIR
import ngs.paver

from scilife.config import get_bcbb_config, get_genome_ref
from scilife.templates import TEMPLATE_DIR, SBATCH_HEADER_TEMPLATE
from scilife.paver.uppmax import automated_initial_analysis

options(
    project_name = ${project_dir},
    dirs = Bunch(
        project = path("${project_dir}"),
        sbatch = path("${sbatch_dir}"),
        log = path("${log_dir}"),
        git = path("${git_dir}"),
        intermediate = path("${intermediate_dir}"),
        data = path("${data_dir}"),
        ),
    sbatch = Bunch(
        project_id = "${uppmax_project_id}",
        constraint = '',
        time = '50:00:00',
        jobname = '',
        workdir = "${intermediate_dir}",
        partition = 'node',
        cores = '8',
        mail_type = 'ALL',
        mail_user = "${mail_user}",
        header = '',
        footer = '',
        command_str = '',
        ),
    sphinx = Bunch(
        docroot = path("${sphinx_dir}"),
        ),
    teqc = Bunch(
        target = "",
        ),
    refgenefile = "/bubo/home/h1/perun/glob/biodata/genomes/Hsapiens/hg19/annotation/refGene.txt",
    ref = "hg19",
    wrapper = "sbatch",
    )
    
options.log = Bunch(dir = path(options.dirs.log))

# Find flowcell ids
options(
    illumina = Bunch(
        flowcell_ids = os.listdir(options.dirs.data),
        ),
    )
'''
)

## Shamelessly stolen from sphinx-quickstart
def mkdir_p(dir):
    if path.isdir(dir):
        return
    os.makedirs(dir)

class ValidationError(Exception):
    """Raised for validation errors."""

def is_path(x):
    if path.exists(x) and not path.isdir(x):
        raise ValidationError("Please enter a valid path name.")
    return x

def nonempty(x):
    if not x:
        raise ValidationError("Please enter some text.")
    return x

# def choice(*l):
#     def val(x):
#         if x not in l:
#             raise ValidationError('Please enter one of %s.' % ', '.join(l))
#         return x
#     return val

# def boolean(x):
#     if x.upper() not in ('Y', 'YES', 'N', 'NO'):
#         raise ValidationError("Please enter either 'y' or 'n'.")
#     return x.upper() in ('Y', 'YES')

# def suffix(x):
#     if not (x[0:1] == '.' and len(x) > 1):
#         raise ValidationError("Please enter a file suffix, "
#                               "e.g. '.rst' or '.txt'.")
#     return x

# def ok(x):
#     return x


def do_prompt(d, key, text, default=None, validator=nonempty):
    while True:
        if default:
            prompt = PROMPT_PREFIX + '%s [%s]: ' % (text, default)
        else:
            prompt = PROMPT_PREFIX + text + ': '
        x = raw_input(prompt)
        if default and not x:
            x = default
        if x.decode('ascii', 'replace').encode('ascii', 'replace') != x:
            if TERM_ENCODING:
                x = x.decode(TERM_ENCODING)
            else:
                print '''* Note: non-ASCII characters entered 
and terminal encoding unknown -- assuming
UTF-8 or Latin-1.'''
                try:
                    x = x.decode('utf-8')
                except UnicodeDecodeError:
                    x = x.decode('latin1')
        try:
            x = validator(x)
        except ValidationError, err:
            print '* ' + str(err)
            continue
        break
    d[key] = x

def inner_main(args):
    d = {}
    print colored('''project_paver_init.py configuration''', attrs=["bold"])
    print

    print '''
    The project name is usually of the form j_doe_00_00, but can be
    any name. This name will be used to generate a directory where the
    pavement.py file is installed
'''
    do_prompt(d, 'project', 'Project name')

    print '''
    The project_dir path defines the root of the project. Relative to this
    path there should be a data directory with raw data, and an
    intermediate directory with intermediate data analyses.
    project_paver_init.py will set up a directory for the pavement.py file, an
    sbatch directory for sbatch files, and a log directory for logging.

    REMEMBER: set project_dir to something like
    /proj/a2010002/projects/j_doe_00_00
'''
    do_prompt(d, 'project_dir', 'project path for the project', '.', is_path)
    d['project_dir'] = path.abspath(d['project_dir'])
    d['cur_dir'] = path.abspath(os.getcwd())
    d['git_dir'] = path.join(d['cur_dir'], d['project'] + '_git')
    while path.isfile(path.join(d['git_dir'], 'pavement.py')):
        print
        print colored('Error: an existing pavement.py has been found in the selected project top directory path.', attrs=["bold"])
        print 'will not overwrite existing pavement.py files.'
        print
        do_prompt(d, 'project_dir', 'Please enter a new top path (or just Enter '
                  'to exit)', '', is_path)
        if not d['project_dir']:
            sys.exit(1)

    do_prompt(d, 'uppmax_project_id', 'which uppmax project id is this project related to? used in the template sbatch file')
    do_prompt(d, 'mail_user', 'what is your mail address?')

    ## Set remaining dictionary variables
    d['now'] = time.asctime()
    d['sbatch_dir'] = path.join(d['cur_dir'], 'sbatch')
    d['log_dir'] = path.join(d['cur_dir'], 'log')
    d['sphinx_dir'] = path.join(d['git_dir'], 'doc')
    d['intermediate_dir'] = path.join(d['project_dir'], "nobackup", "intermediate")
    d['data_dir'] = path.join(d['project_dir'], "nobackup", "data")

    mkdir_p(d['git_dir'])
    mkdir_p(d['sbatch_dir'])
    mkdir_p(d['log_dir'])
    mkdir_p(d['sphinx_dir'])
    pavement_text = PAVEMENT_FILE.render(**d)
    f = open(path.join(d['git_dir'], 'pavement.py'), 'w')
    f.write(PAVEMENT_FILE.render(**d))
    f.close()

    print "Done setting up the paver project. Please run 'sphinx-quickstart' in %s if you haven't done so yet" % (d['sphinx_dir'])


def main(argv=sys.argv):
    print "Started main"
    try:
        return inner_main(argv)
    except (KeyboardInterrupt, EOFError):
        print
        print '[Interrupted.]'
        return

if __name__ == "__main__":
    main(sys.argv)
